{"ast":null,"code":"import { SET_USER_FIELD, SET_USERS_LIST, SAVE_USER, CHANGE_MODAL_STATE, CREATE_USER, LOGOUT } from '../actions/user';\nexport const initialState = {\n  // l'utilisateur est-il loggé\n  logged: false,\n  // token de l'utilisateur \n  token: '',\n  // email de l'utilisateur\n  username: '',\n  // password de l'utilisateur\n  password: '',\n  //email\n  email: '',\n  // Users List\n  list: [],\n  //Open or Close Login Modal\n  loginButton: false,\n  //Open or Close Create Modal\n  createButton: false\n}; // A noter : pour le reducer userReducer, seule la tranche user est visible !\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  switch (action.type) {\n    case CREATE_USER:\n      return { ...state,\n        [action.name]: action.value\n      };\n\n    case SET_USER_FIELD:\n      return { ...state,\n        // pour définir dynamiquement la propriété d'un objet, on utilise la\n        // notation \"crochet\"\n        [action.name]: action.value\n      };\n\n    case SET_USERS_LIST:\n      return { ...state,\n        list: action.usersList\n      };\n\n    case CHANGE_MODAL_STATE:\n      return { ...state,\n        [action.name]: !state[action.name]\n      };\n\n    case SAVE_USER:\n      //console.log('We are in the Reducer, Saving the user info');\n      return { ...state,\n        logged: true,\n        pseudo: action.user.pseudo,\n        token: action.user.token,\n        //logged: true,\n        // facultatif :\n        email: '',\n        password: ''\n      };\n\n    case LOGOUT:\n      console.log('Je suis déco');\n      return { ...state,\n        logged: false,\n        username: '',\n        token: ''\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/nicolaspisar/Sites/_OClock/react/Apo/projet-9-sound-clock-front/src/reducers/user.js"],"names":["SET_USER_FIELD","SET_USERS_LIST","SAVE_USER","CHANGE_MODAL_STATE","CREATE_USER","LOGOUT","initialState","logged","token","username","password","email","list","loginButton","createButton","reducer","state","action","type","name","value","usersList","pseudo","user","console","log"],"mappings":"AACA,SACEA,cADF,EACkBC,cADlB,EACkCC,SADlC,EAC6CC,kBAD7C,EACiEC,WADjE,EAC8EC,MAD9E,QAEO,iBAFP;AAIA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACAC,EAAAA,MAAM,EAAE,KAFkB;AAG1B;AACAC,EAAAA,KAAK,EAAE,EAJmB;AAK1B;AACAC,EAAAA,QAAQ,EAAE,EANgB;AAO1B;AACAC,EAAAA,QAAQ,EAAE,EARgB;AAS1B;AACAC,EAAAA,KAAK,EAAC,EAVoB;AAW1B;AACAC,EAAAA,IAAI,EAAE,EAZoB;AAa1B;AACAC,EAAAA,WAAW,EAAE,KAda;AAe1B;AACAC,EAAAA,YAAY,EAAE;AAhBY,CAArB,C,CAmBP;;AACA,MAAMC,OAAO,GAAG,YAAuC;AAAA,MAAtCC,KAAsC,uEAA9BV,YAA8B;AAAA,MAAhBW,MAAgB,uEAAP,EAAO;;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKd,WAAL;AACE,aAAM,EACJ,GAAGY,KADC;AAEJ,SAACC,MAAM,CAACE,IAAR,GAAeF,MAAM,CAACG;AAFlB,OAAN;;AAKF,SAAKpB,cAAL;AACE,aAAO,EACL,GAAGgB,KADE;AAEL;AACA;AACA,SAACC,MAAM,CAACE,IAAR,GAAeF,MAAM,CAACG;AAJjB,OAAP;;AAMF,SAAKnB,cAAL;AACE,aAAO,EACL,GAAGe,KADE;AAELJ,QAAAA,IAAI,EAAEK,MAAM,CAACI;AAFR,OAAP;;AAIF,SAAKlB,kBAAL;AACE,aAAM,EACJ,GAAGa,KADC;AAEJ,SAACC,MAAM,CAACE,IAAR,GAAe,CAACH,KAAK,CAACC,MAAM,CAACE,IAAR;AAFjB,OAAN;;AAIF,SAAKjB,SAAL;AACE;AACA,aAAO,EACL,GAAGc,KADE;AAELT,QAAAA,MAAM,EAAE,IAFH;AAGLe,QAAAA,MAAM,EAAEL,MAAM,CAACM,IAAP,CAAYD,MAHf;AAILd,QAAAA,KAAK,EAAES,MAAM,CAACM,IAAP,CAAYf,KAJd;AAKL;AACA;AACAG,QAAAA,KAAK,EAAE,EAPF;AAQLD,QAAAA,QAAQ,EAAE;AARL,OAAP;;AAUF,SAAKL,MAAL;AACEmB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,aAAO,EACL,GAAGT,KADE;AAELT,QAAAA,MAAM,EAAE,KAFH;AAGLE,QAAAA,QAAQ,EAAE,EAHL;AAILD,QAAAA,KAAK,EAAE;AAJF,OAAP;;AAMF;AACE,aAAOQ,KAAP;AA7CJ;AA+CD,CAhDD;;AAkDA,eAAeD,OAAf","sourcesContent":["\nimport {\n  SET_USER_FIELD, SET_USERS_LIST, SAVE_USER, CHANGE_MODAL_STATE, CREATE_USER, LOGOUT\n} from '../actions/user';\n\nexport const initialState = {\n  // l'utilisateur est-il loggé\n  logged: false,\n  // token de l'utilisateur \n  token: '',\n  // email de l'utilisateur\n  username: '',\n  // password de l'utilisateur\n  password: '',\n  //email\n  email:'',\n  // Users List\n  list: [],\n  //Open or Close Login Modal\n  loginButton: false,\n  //Open or Close Create Modal\n  createButton: false,\n};\n\n// A noter : pour le reducer userReducer, seule la tranche user est visible !\nconst reducer = (state = initialState, action = {}) => {\n  switch (action.type) {\n    case CREATE_USER:\n      return{\n        ...state,\n        [action.name]: action.value,\n\n      }\n    case SET_USER_FIELD:\n      return {\n        ...state,\n        // pour définir dynamiquement la propriété d'un objet, on utilise la\n        // notation \"crochet\"\n        [action.name]: action.value,\n      };\n    case SET_USERS_LIST:\n      return {\n        ...state,\n        list: action.usersList,\n      };\n    case CHANGE_MODAL_STATE:\n      return{\n        ...state,\n        [action.name]: !state[action.name],\n      };     \n    case SAVE_USER:\n      //console.log('We are in the Reducer, Saving the user info');\n      return {\n        ...state,\n        logged: true,\n        pseudo: action.user.pseudo,\n        token: action.user.token,\n        //logged: true,\n        // facultatif :\n        email: '',\n        password: '',\n      };\n    case LOGOUT:\n      console.log('Je suis déco')\n      return {\n        ...state,\n        logged: false,\n        username: '',\n        token: '',  \n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;"]},"metadata":{},"sourceType":"module"}